# -*- coding: utf-8 -*-
import os
import html
import logging
import requests 
from aiogram.enums import ParseMode 
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    ReplyKeyboardMarkup, 
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from config import BOT_TOKEN, YANDEX_API_KEY, YANDEX_CATALOG_ID
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)
class Form(StatesGroup):
    age = State()
    height = State()
    weight = State()
    goal = State()
    equipment = State()
YANDEX_MODEL_URI = f"gpt://{YANDEX_CATALOG_ID}/yandexgpt/latest"
YANDEX_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
headers = {
    "Authorization": f"Api-Key {YANDEX_API_KEY}",
    "x-folder-id": YANDEX_CATALOG_ID,
    "Content-Type": "application/json; charset=utf-8"
}
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
def get_cancel_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ])
def get_goal_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü–æ—Ö—É–¥–µ—Ç—å"), KeyboardButton(text="–ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É")],
            [KeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã")]
        ],
        resize_keyboard=True
    )
def get_equipment_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ì–∞–Ω—Ç–µ–ª–∏"), KeyboardButton(text="–¢—É—Ä–Ω–∏–∫")],
            [KeyboardButton(text="–°–∫–∞–∫–∞–ª–∫–∞")],
            [KeyboardButton(text="–ö–æ–≤—Ä–∏–∫ –¥–ª—è –π–æ–≥–∏"), KeyboardButton(text="–ù–∏—á–µ–≥–æ")]
        ],
        resize_keyboard=True
    )
@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞", callback_data="start_yes"),
         InlineKeyboardButton(text="–ù–µ—Ç", callback_data="start_no")]
    ])
    await message.answer(
        "üèãÔ∏è –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä!\n"
        "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.\n\n"
        "–ù–∞—á–Ω–µ–º?",
        reply_markup=keyboard
    )
@dp.callback_query(lambda c: c.data == "start_yes")
async def handle_yes(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(Form.age)
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer(
        "üî¢ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 14 –¥–æ 100):",
        reply_markup=get_cancel_keyboard()
    )
    await callback.answer()
@dp.callback_query(lambda c: c.data == "start_no")
async def handle_no(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer("–•–æ—Ä–æ—à–æ, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ - –Ω–∞–ø–∏—à–∏—Ç–µ /start")
    await state.clear()
    await callback.answer()
@dp.callback_query(lambda c: c.data == "cancel")
async def handle_cancel(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /start")
    await callback.answer()
@dp.message(Form.age)
async def process_age(message: types.Message, state: FSMContext):
    try:
        age = int(message.text)
        if not 14 <= age <= 100:
            raise ValueError
            
        await state.update_data(age=age)
        await state.set_state(Form.height)
        await message.answer(
            "üìè –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 180):",
            reply_markup=get_cancel_keyboard()
        )
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 14 –¥–æ 100:")
@dp.message(Form.height)
async def process_height(message: types.Message, state: FSMContext):
    try:
        height = int(message.text)
        if not 100 <= height <= 250:
            raise ValueError
        await state.update_data(height=height)
        await state.set_state(Form.weight)
        await message.answer(
            "‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 75):",
            reply_markup=get_cancel_keyboard()
        )
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 100 –¥–æ 250 —Å–º:")
@dp.message(Form.weight)
async def process_weight(message: types.Message, state: FSMContext):
    try:
        weight = int(message.text)
        if not 30 <= weight <= 300:
            raise ValueError
        await state.update_data(weight=weight)
        await state.set_state(Form.goal)
        await message.answer(
            "‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:",
            reply_markup=get_goal_keyboard()
        )
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 30 –¥–æ 300 –∫–≥:")
@dp.message(Form.goal)
async def process_goal(message: types.Message, state: FSMContext):
    goal = message.text.lower()
    valid_goals = ["–ø–æ—Ö—É–¥–µ—Ç—å", "–Ω–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É", "–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã"]
    if goal not in valid_goals:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫")
        return
    await state.update_data(goal=goal)
    await state.set_state(Form.equipment)
    await message.answer("üèãÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:", reply_markup=get_equipment_keyboard())
@dp.message(Form.equipment)
async def process_equipment(message: types.Message, state: FSMContext):
    try:
        equipment = message.text.lower()
        valid_equipment = ["–≥–∞–Ω—Ç–µ–ª–∏", "—Ç—É—Ä–Ω–∏–∫", "–Ω–∏—á–µ–≥–æ", "—Å–∫–∞–∫–∞–ª–∫–∞", "–∫–æ–≤—Ä–∏–∫ –¥–ª—è –π–æ–≥–∏"]
        if equipment not in valid_equipment:
            raise ValueError
        user_data = await state.get_data()
        prompt = (
            "–°–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –ø–∏—Ç–∞–Ω–∏—è:\n"
            f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {user_data['age']} –ª–µ—Ç\n"
            f"‚Ä¢ –†–æ—Å—Ç: {user_data['height']} —Å–º\n"
            f"‚Ä¢ –í–µ—Å: {user_data['weight']} –∫–≥\n"
            f"‚Ä¢ –¶–µ–ª—å: {user_data['goal']}\n"
            f"‚Ä¢ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {equipment}\n\n"
            "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
            "1. –î–µ—Ç–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å —Å –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å—é\n"
            "2. 3 —Ä–∞–∑–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π\n"
            "3. –ò—Å–ø–æ–ª—å–∑—É–π –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑—É–π –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–µ —Å–ª–æ–≤–∞"
        )
        data = {
            "modelUri": YANDEX_MODEL_URI,
            "completionOptions": {
                "stream": False,
                "temperature": 0.7,
                "maxTokens": 2000
            },
            "messages": [{
                "role": "user",
                "text": prompt
            }]
        }
        response = requests.post(
            YANDEX_URL,
            headers=headers,
            json=data,
            timeout=35
        )
        response.encoding = 'utf-8'
        response.raise_for_status()
        result = response.json()
        plan = result['result']['alternatives'][0]['message']['text']
        logging.info(f"YandexGPT response: {plan}")
        escaped_plan = html.escape(plan)
        await message.answer(
            f"üìã –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω:\n{escaped_plan}",
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        logging.error(f"Error: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await state.clear()
@dp.message()
async def handle_other_messages(message: types.Message):
    await message.answer("‚ÑπÔ∏è –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
if __name__ == "__main__":
    dp.run_polling(bot)